{"ast":null,"code":"import { CommonEngine } from '@nguniversal/common/engine';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This is an express engine for handling Angular Applications\n */\n\nfunction ngExpressEngine(setupOptions) {\n  const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);\n  return function (filePath, options, callback) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    try {\n      const renderOptions = Object.assign({}, options);\n\n      if (!setupOptions.bootstrap && !renderOptions.bootstrap) {\n        throw new Error('You must pass in a NgModule to be bootstrapped');\n      }\n\n      const {\n        req\n      } = renderOptions;\n      const res = (_a = renderOptions.res) !== null && _a !== void 0 ? _a : req.res;\n      renderOptions.url = (_b = renderOptions.url) !== null && _b !== void 0 ? _b : `${req.protocol}://${req.get('host') || ''}${req.baseUrl}${req.url}`;\n      renderOptions.documentFilePath = (_c = renderOptions.documentFilePath) !== null && _c !== void 0 ? _c : filePath;\n      renderOptions.providers = [...((_d = renderOptions.providers) !== null && _d !== void 0 ? _d : []), getReqResProviders(req, res)]; // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      renderOptions.publicPath = (_f = (_e = renderOptions.publicPath) !== null && _e !== void 0 ? _e : setupOptions.publicPath) !== null && _f !== void 0 ? _f : (_g = options.settings) === null || _g === void 0 ? void 0 : _g.views;\n      renderOptions.inlineCriticalCss = (_h = renderOptions.inlineCriticalCss) !== null && _h !== void 0 ? _h : setupOptions.inlineCriticalCss;\n      engine.render(renderOptions).then(html => callback(null, html)).catch(callback);\n    } catch (err) {\n      callback(err);\n    }\n  };\n}\n/**\n * Get providers of the request and response\n */\n\n\nfunction getReqResProviders(req, res) {\n  const providers = [{\n    provide: REQUEST,\n    useValue: req\n  }];\n\n  if (res) {\n    providers.push({\n      provide: RESPONSE,\n      useValue: res\n    });\n  }\n\n  return providers;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ngExpressEngine }; //# sourceMappingURL=express-engine.mjs.map","map":null,"metadata":{},"sourceType":"module"}