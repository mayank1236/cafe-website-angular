{"ast":null,"code":"'use strict';\n\nlet NoWorkResult = require('./no-work-result');\n\nlet LazyResult = require('./lazy-result');\n\nlet Document = require('./document');\n\nlet Root = require('./root');\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.14';\n    this.plugins = this.normalize(plugins);\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]));\n    return this;\n  }\n\n  process(css, opts = {}) {\n    if (this.plugins.length === 0 && typeof opts.parser === 'undefined' && typeof opts.stringifier === 'undefined' && typeof opts.syntax === 'undefined') {\n      return new NoWorkResult(this, css, opts);\n    } else {\n      return new LazyResult(this, css, opts);\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = [];\n\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i();\n      } else if (i.postcss) {\n        i = i.postcss;\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins);\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i);\n      } else if (typeof i === 'function') {\n        normalized.push(i);\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin');\n      }\n    }\n\n    return normalized;\n  }\n\n}\n\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);\nDocument.registerProcessor(Processor);","map":null,"metadata":{},"sourceType":"script"}