{"ast":null,"code":"'use strict';\n\nlet pico = require('picocolors');\n\nlet terminalHighlight = require('./terminal-highlight');\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message);\n    this.name = 'CssSyntaxError';\n    this.reason = message;\n\n    if (file) {\n      this.file = file;\n    }\n\n    if (source) {\n      this.source = source;\n    }\n\n    if (plugin) {\n      this.plugin = plugin;\n    }\n\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line;\n        this.column = column;\n      } else {\n        this.line = line.line;\n        this.column = line.column;\n        this.endLine = column.line;\n        this.endColumn = column.column;\n      }\n    }\n\n    this.setMessage();\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError);\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : '';\n    this.message += this.file ? this.file : '<css input>';\n\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column;\n    }\n\n    this.message += ': ' + this.reason;\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return '';\n    let css = this.source;\n    if (color == null) color = pico.isColorSupported;\n\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css);\n    }\n\n    let lines = css.split(/\\r?\\n/);\n    let start = Math.max(this.line - 3, 0);\n    let end = Math.min(this.line + 2, lines.length);\n    let maxWidth = String(end).length;\n    let mark, aside;\n\n    if (color) {\n      let {\n        bold,\n        red,\n        gray\n      } = pico.createColors(true);\n\n      mark = text => bold(red(text));\n\n      aside = text => gray(text);\n    } else {\n      mark = aside = str => str;\n    }\n\n    return lines.slice(start, end).map((line, index) => {\n      let number = start + 1 + index;\n      let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n\n      if (number === this.line) {\n        let spacing = aside(gutter.replace(/\\d/g, ' ')) + line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ');\n        return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^');\n      }\n\n      return ' ' + aside(gutter) + line;\n    }).join('\\n');\n  }\n\n  toString() {\n    let code = this.showSourceCode();\n\n    if (code) {\n      code = '\\n\\n' + code + '\\n';\n    }\n\n    return this.name + ': ' + this.message + code;\n  }\n\n}\n\nmodule.exports = CssSyntaxError;\nCssSyntaxError.default = CssSyntaxError;","map":null,"metadata":{},"sourceType":"script"}