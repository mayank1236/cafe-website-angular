{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\n\nlet PreviousMap = require('./previous-map');\n\nlet Comment = require('./comment');\n\nlet AtRule = require('./at-rule');\n\nlet Input = require('./input');\n\nlet Root = require('./root');\n\nlet Rule = require('./rule');\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n));\n  let {\n    inputs: ownInputs,\n    ...defaults\n  } = json;\n\n  if (ownInputs) {\n    inputs = [];\n\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input,\n        __proto__: Input.prototype\n      };\n\n      if (inputHydrated.map) {\n        inputHydrated.map = { ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        };\n      }\n\n      inputs.push(inputHydrated);\n    }\n  }\n\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));\n  }\n\n  if (defaults.source) {\n    let {\n      inputId,\n      ...source\n    } = defaults.source;\n    defaults.source = source;\n\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId];\n    }\n  }\n\n  if (defaults.type === 'root') {\n    return new Root(defaults);\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults);\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults);\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults);\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults);\n  } else {\n    throw new Error('Unknown node type: ' + json.type);\n  }\n}\n\nmodule.exports = fromJSON;\nfromJSON.default = fromJSON;","map":null,"metadata":{},"sourceType":"script"}