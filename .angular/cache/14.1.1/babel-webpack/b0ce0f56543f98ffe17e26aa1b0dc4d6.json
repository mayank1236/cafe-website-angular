{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport { INITIAL_CONFIG, renderModule } from '@angular/platform-server';\nimport { ɵInlineCriticalCssProcessor } from '@nguniversal/common/tools';\nimport * as fs from 'fs';\nimport { resolve, dirname } from 'path';\nimport { URL } from 'url';\n/**\n * A common rendering engine utility. This abstracts the logic\n * for handling the platformServer compiler, the module cache, and\n * the document loader\n */\n\nclass CommonEngine {\n  constructor(module, providers = []) {\n    this.module = module;\n    this.providers = providers;\n    this.templateCache = new Map();\n    this.pageExists = new Map();\n    this.inlineCriticalCssProcessor = new ɵInlineCriticalCssProcessor({\n      minify: true\n    });\n  }\n  /**\n   * Render an HTML document for a specific URL with specified\n   * render options\n   */\n\n\n  render(opts) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        inlineCriticalCss = true\n      } = opts;\n\n      if (opts.publicPath && opts.documentFilePath && opts.url !== undefined) {\n        const url = new URL(opts.url); // Remove leading forward slash.\n\n        const pathname = url.pathname.substring(1);\n        const pagePath = resolve(opts.publicPath, pathname, 'index.html');\n\n        if (pagePath !== resolve(opts.documentFilePath)) {\n          // View path doesn't match with prerender path.\n          let pageExists = this.pageExists.get(pagePath);\n\n          if (pageExists === undefined) {\n            pageExists = yield exists(pagePath);\n            this.pageExists.set(pagePath, pageExists);\n          }\n\n          if (pageExists) {\n            // Serve pre-rendered page.\n            return fs.promises.readFile(pagePath, 'utf-8');\n          }\n        }\n      } // if opts.document dosen't exist then opts.documentFilePath must\n\n\n      const extraProviders = [...(opts.providers || []), ...(this.providers || [])];\n      let doc = opts.document;\n\n      if (!doc && opts.documentFilePath) {\n        doc = yield this.getDocument(opts.documentFilePath);\n      }\n\n      if (doc) {\n        extraProviders.push({\n          provide: INITIAL_CONFIG,\n          useValue: {\n            document: inlineCriticalCss ? // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64\n            doc.replace(/ media=\"print\" onload=\"this\\.media='all'\"><noscript><link .+?><\\/noscript>/g, '>') : doc,\n            url: opts.url\n          }\n        });\n      }\n\n      const moduleOrFactory = this.module || opts.bootstrap;\n      const html = yield renderModule(moduleOrFactory, {\n        extraProviders\n      });\n\n      if (!inlineCriticalCss) {\n        return html;\n      }\n\n      const {\n        content,\n        errors,\n        warnings\n      } = yield this.inlineCriticalCssProcessor.process(html, {\n        outputPath: (_a = opts.publicPath) !== null && _a !== void 0 ? _a : opts.documentFilePath ? dirname(opts.documentFilePath) : ''\n      }); // eslint-disable-next-line no-console\n\n      warnings === null || warnings === void 0 ? void 0 : warnings.forEach(m => console.warn(m)); // eslint-disable-next-line no-console\n\n      errors === null || errors === void 0 ? void 0 : errors.forEach(m => console.error(m));\n      return content;\n    });\n  }\n  /** Retrieve the document from the cache or the filesystem */\n\n\n  getDocument(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let doc = this.templateCache.get(filePath);\n\n      if (!doc) {\n        doc = yield fs.promises.readFile(filePath, 'utf-8');\n        this.templateCache.set(filePath, doc);\n      }\n\n      return doc;\n    });\n  }\n\n}\n\nfunction exists(path) {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      yield fs.promises.access(path, fs.constants.F_OK);\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CommonEngine }; //# sourceMappingURL=engine.mjs.map","map":null,"metadata":{},"sourceType":"module"}